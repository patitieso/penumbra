syntax = "proto3";

package penumbra.client.v1alpha1;

import "ibc/core/commitment/v1/commitment.proto";
import "penumbra/core/chain/v1alpha1/chain.proto";
import "penumbra/core/crypto/v1alpha1/crypto.proto";
import "penumbra/core/dex/v1alpha1/dex.proto";
import "penumbra/core/stake/v1alpha1/stake.proto";

import "google/protobuf/timestamp.proto";
import "tendermint/p2p/types.proto";
import "tendermint/crypto/proof.proto";
import "tendermint/types/block.proto";
import "tendermint/types/types.proto";
import "tendermint/types/validator.proto";
// TODO: clean up import paths (this is pulling from the ibc-go-vendor root)
// import "proofs.proto";

// Methods for accessing chain state that are "oblivious" in the sense that they
// do not request specific portions of the chain state that could reveal private
// client data.  For instance, requesting all asset denominations is oblivious,
// but requesting the asset denomination for a specific asset id is not, because
// it reveals that the client has an interest in that asset specifically.
service ObliviousQueryService {
  rpc CompactBlockRange(CompactBlockRangeRequest) returns (stream CompactBlockRangeResponse);
  rpc ChainParameters(ChainParametersRequest) returns (ChainParametersResponse);
  rpc EpochByHeight(EpochByHeightRequest) returns (EpochByHeightResponse);
  rpc ValidatorInfo(ValidatorInfoRequest) returns (stream ValidatorInfoResponse);
  rpc Info(InfoRequest) returns (InfoResponse);
}

// Requests information about the chain state as known by the node.
message InfoRequest {
  // The Tendermint software semantic version.
  string version = 1;
  // The Tendermint block protocol version.
  uint64 block_version = 2;
  // The Tendermint p2p protocol version.
  uint64 p2p_version = 3;
}

// Contains information about the chain state as known by the node.
message InfoResponse {
    // Some arbitrary information.
    bytes data = 1;
    // The application software semantic version.
    string version = 2;
    // The application protocol version.
    uint64 app_version = 3;
    // The latest block for which the app has called [`Commit`](super::super::Request::Commit).
    uint64 last_block_height = 4;
    // The latest result of [`Commit`](super::super::Request::Commit).
    bytes last_block_app_hash = 5;
}

// Requests a range of compact block data.
message CompactBlockRangeRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // The start height of the range.
  uint64 start_height = 2;
  // The end height of the range, defaults to the latest block height.
  uint64 end_height = 3;
  // If set, keeps the connection alive past `end_height`,
  // streaming new compact blocks as they are created.
  bool keep_alive = 4;
}

message CompactBlockRangeResponse {
  core.chain.v1alpha1.CompactBlock compact_block = 1;
}

// Requests the global configuration data for the chain.
message ChainParametersRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
}

message EpochByHeightRequest {
    uint64 height = 1;
}

message EpochByHeightResponse {
    core.chain.v1alpha1.Epoch epoch = 1;
}

message ChainParametersResponse {
  core.chain.v1alpha1.ChainParameters chain_parameters = 1;
}

// Requests information on the chain's validators.
message ValidatorInfoRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // Whether or not to return inactive validators
  bool show_inactive = 2;
}

message ValidatorInfoResponse {
  core.stake.v1alpha1.ValidatorInfo validator_info = 1;
}

// Methods for accessing chain state that are "specific" in the sense that they
// request specific portions of the chain state that could reveal private
// client data.  For instance, requesting all asset denominations is oblivious,
// but requesting the asset denomination for a specific asset id is not, because
// it reveals that the client has an interest in that asset specifically.
service SpecificQueryService {
  rpc TransactionByNote(TransactionByNoteRequest) returns (TransactionByNoteResponse);
  rpc ValidatorStatus(ValidatorStatusRequest) returns (ValidatorStatusResponse);
  rpc ValidatorPenalty(ValidatorPenaltyRequest) returns (ValidatorPenaltyResponse);
  rpc NextValidatorRate(NextValidatorRateRequest) returns (NextValidatorRateResponse);

  rpc BatchSwapOutputData(BatchSwapOutputDataRequest) returns (BatchSwapOutputDataResponse);
  rpc SwapExecution(SwapExecutionRequest) returns (SwapExecutionResponse);
  rpc ArbExecution(ArbExecutionRequest) returns (ArbExecutionResponse);

  rpc SwapExecutions(SwapExecutionsRequest) returns (stream SwapExecutionsResponse);
  rpc ArbExecutions(ArbExecutionsResponse) returns (stream ArbExecutionsResponse);

  rpc LiquidityPositions(LiquidityPositionsRequest) returns (stream LiquidityPositionsResponse);
  rpc LiquidityPositionById(LiquidityPositionByIdRequest) returns (LiquidityPositionByIdResponse);
  rpc LiquidityPositionsById(LiquidityPositionsByIdRequest) returns (stream LiquidityPositionsByIdResponse);
  rpc LiquidityPositionsByPrice(LiquidityPositionsByPriceRequest) returns (stream LiquidityPositionsByPriceResponse);

  rpc Spread(SpreadRequest) returns (SpreadResponse);
  rpc AssetInfo(AssetInfoRequest) returns (AssetInfoResponse);
  rpc ProposalInfo(ProposalInfoRequest) returns (ProposalInfoResponse);
  rpc ProposalRateData(ProposalRateDataRequest) returns (stream ProposalRateDataResponse);

  // General-purpose key-value state query API, that can be used to query
  // arbitrary keys in the JMT storage.
  rpc KeyValue(KeyValueRequest) returns (KeyValueResponse);

  // General-purpose prefixed key-value state query API, that can be used to query
  // arbitrary prefixes in the JMT storage.
  rpc PrefixValue(PrefixValueRequest) returns (stream PrefixValueResponse);
}

message TransactionByNoteRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  core.crypto.v1alpha1.StateCommitment note_commitment = 2;
}

message TransactionByNoteResponse {
  core.chain.v1alpha1.NoteSource note_source = 1;
}

message ValidatorStatusRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  core.crypto.v1alpha1.IdentityKey identity_key = 2;
}

message ValidatorStatusResponse {
  core.stake.v1alpha1.ValidatorStatus status = 1;
}

// Requests the compounded penalty for a validator over a range of epochs.
message ValidatorPenaltyRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  core.crypto.v1alpha1.IdentityKey identity_key = 2;
  uint64 start_epoch_index = 3;
  uint64 end_epoch_index = 4;
}

message ValidatorPenaltyResponse {
  core.stake.v1alpha1.Penalty penalty = 1;
}

message NextValidatorRateRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  core.crypto.v1alpha1.IdentityKey identity_key = 2;
}

message NextValidatorRateResponse {
  core.stake.v1alpha1.RateData data = 1;
}

// Requests batch swap data associated with a given height and trading pair from the view service.
message BatchSwapOutputDataRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  uint64 height = 2;
  core.dex.v1alpha1.TradingPair trading_pair = 3;
}

message BatchSwapOutputDataResponse {
  core.dex.v1alpha1.BatchSwapOutputData data = 1;
}

message SwapExecutionRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  uint64 height = 2;
  core.dex.v1alpha1.TradingPair trading_pair = 3;
}

message SwapExecutionResponse {
  core.dex.v1alpha1.SwapExecution swap_execution = 1;
}

message ArbExecutionRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  uint64 height = 2;
}

message ArbExecutionResponse {
  core.dex.v1alpha1.SwapExecution swap_execution = 1;
  uint64 height = 2;
}

message SwapExecutionsRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // If present, only return swap executions occurring after the given height.
  uint64 start_height = 2;
  // If present, only return swap executions occurring before the given height.
  uint64 end_height = 3;
  // If present, filter swap executions by the given trading pair.
  core.dex.v1alpha1.TradingPair trading_pair = 4;
}

message SwapExecutionsResponse {
  core.dex.v1alpha1.SwapExecution swap_execution = 1;
  uint64 height = 2;
  core.dex.v1alpha1.TradingPair trading_pair = 3;
}

message ArbExecutionsRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // If present, only return arb executions occurring after the given height.
  uint64 start_height = 2;
  // If present, only return arb executions occurring before the given height.
  uint64 end_height = 3;
}

message ArbExecutionsResponse {
  core.dex.v1alpha1.SwapExecution swap_execution = 1;
  uint64 height = 2;
}

// Requests all liquidity position data from the view service.
message LiquidityPositionsRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // If true, include closed and withdrawn positions.
  bool include_closed = 4;
}

message LiquidityPositionsResponse {
  core.dex.v1alpha1.Position data = 1;
}

// Requests liquidity positions for ordered by effective price.
message LiquidityPositionsByPriceRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // The directed trading pair to request positions for
  core.dex.v1alpha1.DirectedTradingPair trading_pair = 2;
  // The maximum number of positions to return.
  uint64 limit = 5;
}

message LiquidityPositionsByPriceResponse {
  core.dex.v1alpha1.Position data = 1;
}

// Requests specific liquidity position data from the view service.
message LiquidityPositionByIdRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  core.dex.v1alpha1.PositionId position_id = 2;
}

message LiquidityPositionByIdResponse {
  core.dex.v1alpha1.Position data = 1;
}

message LiquidityPositionsByIdRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  repeated core.dex.v1alpha1.PositionId position_id = 2;
}

message LiquidityPositionsByIdResponse {
  core.dex.v1alpha1.Position data = 1;
}

message SpreadRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  core.dex.v1alpha1.TradingPair trading_pair = 2;
}

message SpreadResponse {
  // The best position when trading 1 => 2.
  core.dex.v1alpha1.Position best_1_to_2_position = 1;
  // The best position when trading 2 => 1.
  core.dex.v1alpha1.Position best_2_to_1_position = 2;
  // An approximation of the effective price when trading 1 => 2.
  double approx_effective_price_1_to_2 = 3;
  // An approximation of the effective price when trading 2 => 1.
  double approx_effective_price_2_to_1 = 4;
}

// Requests information on an asset by asset id
message AssetInfoRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // The asset id to request information on.
  core.crypto.v1alpha1.AssetId asset_id = 2;
}

message AssetInfoResponse {
  // If present, information on the requested asset.
  //
  // If the requested asset was unknown, this field will not be present.
  core.crypto.v1alpha1.Asset asset = 1;
}

message ProposalInfoRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // The proposal id to request information on.
  uint64 proposal_id = 2;
}

message ProposalInfoResponse {
  // The block height at which the proposal started voting.
  uint64 start_block_height = 1;
  // The position of the state commitment tree at which the proposal is considered to have started voting.
  uint64 start_position = 2;
}

// Requests the validator rate data for a proposal.
message ProposalRateDataRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // The proposal id to request information on.
  uint64 proposal_id = 2;
}

// The rate data for a single validator.
message ProposalRateDataResponse {
  core.stake.v1alpha1.RateData rate_data = 1;
}

// Performs a key-value query, either by key or by key hash.
//
// Proofs are only supported by key.
message KeyValueRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // If set, the key to fetch from storage.
  string key = 2;
  // whether to return a proof
  bool proof = 3;
}

message KeyValueResponse {
  bytes value = 1;
  .ibc.core.commitment.v1.MerkleProof proof = 2;
}

// Performs a prefixed key-value query, by string prefix.
message PrefixValueRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // The prefix to fetch subkeys from storage.
  string prefix = 2;
}

message PrefixValueResponse {
  string key = 1;
  bytes value = 2;
}

// Defines the gRPC query service for proxying requests to an upstream Tendermint RPC.
service TendermintProxyService {
  // Status queries the current status.
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {
  }

  // Broadcast a transaction asynchronously.
  rpc BroadcastTxAsync(BroadcastTxAsyncRequest) returns (BroadcastTxAsyncResponse) {
  }

  // Broadcast a transaction synchronously.
  rpc BroadcastTxSync(BroadcastTxSyncRequest) returns (BroadcastTxSyncResponse) {
  }

  // Fetch a transaction by hash.
  rpc GetTx(GetTxRequest) returns (GetTxResponse) {
  }

  // ABCIQuery defines a query handler that supports ABCI queries directly to the
  // application, bypassing Tendermint completely. The ABCI query must contain
  // a valid and supported path, including app, custom, p2p, and store.
  rpc ABCIQuery(ABCIQueryRequest) returns (ABCIQueryResponse) {
  }

  // GetBlockByHeight queries block for given height.
  rpc GetBlockByHeight(GetBlockByHeightRequest) returns (GetBlockByHeightResponse) {
  }
}

// GetTxRequest is the request type for the GetTx RPC method.
message GetTxRequest {
    // Hash of transaction to retrieve
    bytes hash = 1;
    // Include proofs of the transaction's inclusion in the block
    bool prove = 2;
}

// GetTxResponse is the response type for the GetTx RPC method.
message GetTxResponse {
    // Hash of transaction
    bytes hash = 1;
    uint64 height = 2;
    uint64 index = 3;
    TxResult tx_result = 4;
    bytes tx = 5;
}

message TxResult {
  string log = 1;
  uint64 gas_wanted = 2;
  uint64 gas_used = 3;
  repeated Tag tags = 4;
}

message Tag {
  bytes key = 1;
  bytes value = 2;
  bool index = 3;
}

// BroadcastTxAsyncRequest is the request type for the BroadcastTxAsync RPC method.
message BroadcastTxAsyncRequest {
    bytes params = 1;
    uint64 req_id = 2;
}

// BroadcastTxAsyncResponse is the response type for the BroadcastTxAsync RPC method.
message BroadcastTxAsyncResponse {
    uint64 code = 1;
    bytes data = 2;
    string log = 3;
    bytes hash = 4;
}

// BroadcastTxSyncRequest is the request type for the BroadcastTxSync RPC method.
message BroadcastTxSyncRequest {
    bytes params = 1;
    uint64 req_id = 2;
}

// BroadcastTxSyncResponse is the response type for the BroadcastTxSync RPC method.
message BroadcastTxSyncResponse {
    uint64 code = 1;
    bytes data = 2;
    string log = 3;
    bytes hash = 4;
}

// GetStatusRequest is the request type for the Query/GetStatus RPC method.
message GetStatusRequest {
}

// GetStatusResponse is the response type for the Query/GetStatus RPC method.
message GetStatusResponse {
  .tendermint.p2p.DefaultNodeInfo node_info = 1;
  SyncInfo sync_info = 2;
  .tendermint.types.Validator validator_info = 3;
}

message SyncInfo {
    bytes latest_block_hash = 1;
    bytes latest_app_hash = 2;
    uint64 latest_block_height = 3;
    google.protobuf.Timestamp latest_block_time = 4;
    // These are implemented in tendermint, but not
    // in tendermint-rpc.
    // bytes earliest_block_hash = 5;
    // bytes earliest_app_hash = 6;
    // uint64 earliest_block_height = 7;
    // google.protobuf.Timestamp earliest_block_time = 8;
    bool catching_up = 9;
}

// ABCIQueryRequest defines the request structure for the ABCIQuery gRPC query.
message ABCIQueryRequest {
  bytes  data   = 1;
  string path   = 2;
  int64  height = 3;
  bool   prove  = 4;
}

// ABCIQueryResponse defines the response structure for the ABCIQuery gRPC query.
//
// Note: This type is a duplicate of the ResponseQuery proto type defined in
// Tendermint.
message ABCIQueryResponse {
  uint32 code = 1;
  // DEPRECATED: use "value" instead
  reserved 2;
  string   log       = 3; // nondeterministic
  string   info      = 4; // nondeterministic
  int64    index     = 5;
  bytes    key       = 6;
  bytes    value     = 7;
  .tendermint.crypto.ProofOps proof_ops = 8;
  int64    height    = 9;
  string   codespace = 10;
}

// GetBlockByHeightRequest is the request type for the Query/GetBlockByHeight RPC method.
message GetBlockByHeightRequest {
  int64 height = 1;
}

// GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method.
message GetBlockByHeightResponse {
  .tendermint.types.BlockID block_id = 1;

  .tendermint.types.Block block = 2;
}
